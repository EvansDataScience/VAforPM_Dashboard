MapCount2022$count,
n = 5)
# the base map
base= leaflet() %>% addTiles()
final2022 = base %>%
addPolygons(data=MapCount2022,
weight = 0, #width border
opacity =  1, # 0 transparencia total
fillOpacity = 0.5, # contraste de paleta
fillColor = ~paletteFun(count)) # coloreando
library(leafsync)
install.packages("leafsync")
library(leaflet)
rm(list = ls())
library(sf)
MapCount=read_sf("NeighborhoodMap_crimecount.geojson")
# color segun valor
MapCount2019=MapCount[MapCount$year==2019,]
paletteFun=colorQuantile("YlGnBu",
MapCount2019$count,
n = 5)
# the base map
base= leaflet() %>% addTiles()
final2019 = base %>%
addPolygons(data=MapCount2019,
weight = 0, #width border
opacity =  1, # 0 transparencia total
fillOpacity = 0.5, # contraste de paleta
fillColor = ~paletteFun(count)) # coloreando
# color segun valor
MapCount2020=MapCount[MapCount$year==2020,]
paletteFun=colorQuantile("YlGnBu",
MapCount2020$count,
n = 5)
# the base map
base= leaflet() %>% addTiles()
final2020 = base %>%
addPolygons(data=MapCount2020,
weight = 0, #width border
opacity =  1, # 0 transparencia total
fillOpacity = 0.5, # contraste de paleta
fillColor = ~paletteFun(count)) # coloreando
# color segun valor
MapCount2021=MapCount[MapCount$year==2021,]
paletteFun=colorQuantile("YlGnBu",
MapCount2021$count,
n = 5)
# the base map
base= leaflet() %>% addTiles()
final2021 = base %>%
addPolygons(data=MapCount2021,
weight = 0, #width border
opacity =  1, # 0 transparencia total
fillOpacity = 0.5, # contraste de paleta
fillColor = ~paletteFun(count)) # coloreando
# color segun valor
MapCount2022=MapCount[MapCount$year==2022,]
paletteFun=colorQuantile("YlGnBu",
MapCount2022$count,
n = 5)
# the base map
base= leaflet() %>% addTiles()
final2022 = base %>%
addPolygons(data=MapCount2022,
weight = 0, #width border
opacity =  1, # 0 transparencia total
fillOpacity = 0.5, # contraste de paleta
fillColor = ~paletteFun(count)) # coloreando
library(leafsync)
sync(final2019, final2020, final2021, final2022)
library(leaflet)
rm(list = ls())
library(sf)
MapCount=read_sf("NeighborhoodMap_crimecount.geojson")
# color segun valor
MapCount2019=MapCount[MapCount$year==2019,]
paletteFun=colorQuantile("YlGnBu",
MapCount2019$count,
n = 5)
# the base map
base= leaflet() %>% addTiles()
final2019 = base %>%
addPolygons(data=MapCount2019,
weight = 0, #width border
opacity =  1, # 0 transparencia total
fillOpacity = 0.5, # contraste de paleta
fillColor = ~paletteFun(count)) # coloreando
# color segun valor
MapCount2020=MapCount[MapCount$year==2020,]
paletteFun=colorQuantile("YlGnBu",
MapCount2020$count,
n = 5)
# the base map
base= leaflet() %>% addTiles()
final2020 = base %>%
addPolygons(data=MapCount2020,
weight = 0, #width border
opacity =  1, # 0 transparencia total
fillOpacity = 0.5, # contraste de paleta
fillColor = ~paletteFun(count)) # coloreando
# color segun valor
MapCount2021=MapCount[MapCount$year==2021,]
paletteFun=colorQuantile("YlGnBu",
MapCount2021$count,
n = 5)
# the base map
base= leaflet() %>% addTiles()
final2021 = base %>%
addPolygons(data=MapCount2021,
weight = 0, #width border
opacity =  1, # 0 transparencia total
fillOpacity = 0.5, # contraste de paleta
fillColor = ~paletteFun(count)) # coloreando
# color segun valor
MapCount2022=MapCount[MapCount$year==2022,]
paletteFun=colorQuantile("YlGnBu",
MapCount2022$count,
n = 5)
# the base map
base= leaflet() %>% addTiles()
final2022 = base %>%
addPolygons(data=MapCount2022,
weight = 0, #width border
opacity =  1, # 0 transparencia total
fillOpacity = 1, # contraste de paleta
fillColor = ~paletteFun(count)) # coloreando
library(leafsync)
sync(final2019, final2020, final2021, final2022)
library(leaflet)
rm(list = ls())
library(sf)
MapCount=read_sf("NeighborhoodMap_crimecount.geojson")
# color segun valor
MapCount2019=MapCount[MapCount$year==2019,]
paletteFun=colorQuantile("YlGnBu",
MapCount2019$count,
n = 5)
# the base map
base= leaflet() %>% addTiles()
final2019 = base %>%
addPolygons(data=MapCount2019,
weight = 0, #width border
opacity =  1, # 0 transparencia total
fillOpacity = 0.8, # contraste de paleta
fillColor = ~paletteFun(count)) # coloreando
# color segun valor
MapCount2020=MapCount[MapCount$year==2020,]
paletteFun=colorQuantile("YlGnBu",
MapCount2020$count,
n = 5)
# the base map
base= leaflet() %>% addTiles()
final2020 = base %>%
addPolygons(data=MapCount2020,
weight = 0, #width border
opacity =  1, # 0 transparencia total
fillOpacity = 0.8, # contraste de paleta
fillColor = ~paletteFun(count)) # coloreando
# color segun valor
MapCount2021=MapCount[MapCount$year==2021,]
paletteFun=colorQuantile("YlGnBu",
MapCount2021$count,
n = 5)
# the base map
base= leaflet() %>% addTiles()
final2021 = base %>%
addPolygons(data=MapCount2021,
weight = 0, #width border
opacity =  1, # 0 transparencia total
fillOpacity = 0.8, # contraste de paleta
fillColor = ~paletteFun(count)) # coloreando
# color segun valor
MapCount2022=MapCount[MapCount$year==2022,]
paletteFun=colorQuantile("YlGnBu",
MapCount2022$count,
n = 5)
# the base map
base= leaflet() %>% addTiles()
final2022 = base %>%
addPolygons(data=MapCount2022,
weight = 0, #width border
opacity =  1, # 0 transparencia total
fillOpacity = 0.8, # contraste de paleta
fillColor = ~paletteFun(count)) # coloreando
library(leafsync)
sync(final2019, final2020, final2021, final2022)
rm(list = ls())
library(sf)
PointLocations=read_sf("crimes_dot_map.geojson")
rm(list = ls())
library(sf)
PointLocations=read_sf("crimes_dot_map.geojson")
# color segun valor
PointLocations2019=PointLocations[PointLocations$year==2019,]
leaflet(PointLocations2019) %>% addTiles() %>% addMarkers(
clusterOptions = markerClusterOptions()
)
rm(list = ls())
library(sf)
PointLocations=read_sf("crimes_dot_map.geojson")
PointLocations2019=PointLocations[PointLocations$year==2019,]
final2019=leaflet(PointLocations2019) %>% addTiles() %>% addMarkers(
clusterOptions = markerClusterOptions()
)
PointLocations2020=PointLocations[PointLocations$year==2020,]
final2020=leaflet(PointLocations2020) %>% addTiles() %>% addMarkers(
clusterOptions = markerClusterOptions()
)
PointLocations2021=PointLocations[PointLocations$year==2021,]
final2021=leaflet(PointLocations2021) %>% addTiles() %>% addMarkers(
clusterOptions = markerClusterOptions()
)
PointLocations2022=PointLocations[PointLocations$year==2022,]
final2022=leaflet(PointLocations2022) %>% addTiles() %>% addMarkers(
clusterOptions = markerClusterOptions()
)
library(leafsync)
latticeView(final2019, final2020, final2021, final2022)
rm(list = ls())
library(sf)
PointLocations=read_sf("crimes_dot_map.geojson")
PointLocations2019=PointLocations[PointLocations$year==2019,]
final2019=leaflet(PointLocations2019) %>% addTiles() %>% addMarkers(
clusterOptions = markerClusterOptions()
)
PointLocations2020=PointLocations[PointLocations$year==2020,]
final2020=leaflet(PointLocations2020) %>% addTiles() %>% addMarkers(
clusterOptions = markerClusterOptions()
)
PointLocations2021=PointLocations[PointLocations$year==2021,]
final2021=leaflet(PointLocations2021) %>% addTiles() %>% addMarkers(
clusterOptions = markerClusterOptions()
)
PointLocations2022=PointLocations[PointLocations$year==2022,]
final2022=leaflet(PointLocations2022) %>% addTiles() %>% addMarkers(
clusterOptions = markerClusterOptions()
)%>% addTitle("Hello World")
install.packages("leafletCN")
rm(list = ls())
library(sf)
library(leafletCN)
PointLocations=read_sf("crimes_dot_map.geojson")
PointLocations2019=PointLocations[PointLocations$year==2019,]
final2019=leaflet(PointLocations2019) %>% addTiles() %>% addMarkers(
clusterOptions = markerClusterOptions()
)
PointLocations2020=PointLocations[PointLocations$year==2020,]
final2020=leaflet(PointLocations2020) %>% addTiles() %>% addMarkers(
clusterOptions = markerClusterOptions()
)
PointLocations2021=PointLocations[PointLocations$year==2021,]
final2021=leaflet(PointLocations2021) %>% addTiles() %>% addMarkers(
clusterOptions = markerClusterOptions()
)
PointLocations2022=PointLocations[PointLocations$year==2022,]
final2022=leaflet(PointLocations2022) %>% addTiles() %>% addMarkers(
clusterOptions = markerClusterOptions()
)%>% addTitle("Hello World")
rm(list = ls())
library(sf)
PointLocations=read_sf("crimes_dot_map.geojson")
PointLocations2019=PointLocations[PointLocations$year==2019,]
pal <- colorFactor(
palette = 'Dark2',
domain = PointLocations2019$crimeMini
)
final2019=leaflet(PointLocations2019) %>% addTiles() %>% addMarkers(
clusterOptions = markerClusterOptions(color = ~pal(crimeMini))
)
PointLocations2020=PointLocations[PointLocations$year==2020,]
final2020=leaflet(PointLocations2020) %>% addTiles() %>% addMarkers(
clusterOptions = markerClusterOptions()
)
PointLocations2021=PointLocations[PointLocations$year==2021,]
final2021=leaflet(PointLocations2021) %>% addTiles() %>% addMarkers(
clusterOptions = markerClusterOptions()
)
PointLocations2022=PointLocations[PointLocations$year==2022,]
final2022=leaflet(PointLocations2022) %>% addTiles() %>% addMarkers(
clusterOptions = markerClusterOptions()
)
library(leafsync)
latticeView(final2019, final2020, final2021, final2022)
pal <- colorFactor(
palette = 'Dark2',
domain = PointLocations2019$crimeMini
)
final2019=leaflet(PointLocations2019) %>% addTiles() %>% addMarkers(
clusterOptions = markerClusterOptions(),color = ~pal(crimeMini)
)
pal <- colorFactor(
palette = 'Dark2',
domain = PointLocations2019$crimeMini
)
final2019=leaflet(PointLocations2019) %>% addTiles() %>% addMarkers(
clusterOptions = markerClusterOptions(),fill = ~pal(crimeMini)
)
leaflet(PointLocations2019) %>% addTiles() %>% addMarkers(
clusterOptions = markerClusterOptions(fill = ~pal(crimeMini))
)
leaflet(PointLocations2019) %>% addTiles() %>%
addCircles(color = ~pal(type))
leaflet(PointLocations2019) %>% addTiles() %>%
addCircles(color = ~pal(crimeMini))
library(dygraphs)
load("Line_crimeTime.rdata")
library(dygraphs)
dygraph(Line_crimeTime)
xts(Line_crimeTime[,-1], order.by=Line_crimeTime[,1])
library(xts)
xts(Line_crimeTime[,-1], order.by=Line_crimeTime[,1])
Line_crimeTime
load("crimeWeeklyCount.rds")
crimeWeeklyCount=readRDS("crimeWeeklyCount.rds")
crimeWeeklyCount
View(crimeWeeklyCount)
dygraph(crimeWeeklyCount)
xts(crimeWeeklyCount[,-1], order.by=crimeWeeklyCount[,1])
dygraph(xts(crimeWeeklyCount[,-1], order.by=crimeWeeklyCount[,1]))
load("Line_crimeTime.rdata")
Line_crimeTime
load("Line_crimeTime.rdata")
ggplotly(Line_crimeTime)
library(plotly)
load("Line_crimeTime.rdata")
ggplotly(Line_crimeTime)
crimeWeeklyCount=readRDS("crimeWeeklyCount.rds")
library(xts)
library(dygraphs)
dygraph(xts(crimeWeeklyCount[,-1], #date
order.by=crimeWeeklyCount[,1]))#counts
%>%
crimeWeeklyCount=readRDS("crimeWeeklyCount.rds")
library(xts)
library(dygraphs)
dygraph(xts(crimeWeeklyCount[,-1], #date
order.by=crimeWeeklyCount[,1]))%>%#counts
dyRangeSelector()
library(leaflet)
rm(list = ls())
library(sf)
MapCount=read_sf("NeighborhoodMap_crimecount.geojson")
# color segun valor
MapCount2019=MapCount[MapCount$year==2019,]
paletteFun=colorQuantile("YlGnBu",
MapCount2019$count,
n = 5)
# the base map
base= leaflet() %>% addTiles()
final2019 = base %>%
addPolygons(data=MapCount2019,
weight = 0, #width border
opacity =  1, # 0 transparencia total
fillOpacity = 0.8, # contraste de paleta
fillColor = ~paletteFun(count)) # coloreando
# color segun valor
MapCount2020=MapCount[MapCount$year==2020,]
paletteFun=colorQuantile("YlGnBu",
MapCount2020$count,
n = 5)
# the base map
base= leaflet() %>% addTiles()
final2020 = base %>%
addPolygons(data=MapCount2020,
weight = 0, #width border
opacity =  1, # 0 transparencia total
fillOpacity = 0.8, # contraste de paleta
fillColor = ~paletteFun(count)) # coloreando
# color segun valor
MapCount2021=MapCount[MapCount$year==2021,]
paletteFun=colorQuantile("YlGnBu",
MapCount2021$count,
n = 5)
# the base map
base= leaflet() %>% addTiles()
final2021 = base %>%
addPolygons(data=MapCount2021,
weight = 0, #width border
opacity =  1, # 0 transparencia total
fillOpacity = 0.8, # contraste de paleta
fillColor = ~paletteFun(count)) # coloreando
# color segun valor
MapCount2022=MapCount[MapCount$year==2022,]
paletteFun=colorQuantile("YlGnBu",
MapCount2022$count,
n = 5)
# the base map
base= leaflet() %>% addTiles()
final2022 = base %>%
addPolygons(data=MapCount2022,
weight = 0, #width border
opacity =  1, # 0 transparencia total
fillOpacity = 0.8, # contraste de paleta
fillColor = ~paletteFun(count)) # coloreando
library(leafsync)
sync(final2019, final2020, final2021, final2022)
library(htmlwidgets)
saveWidget(final2019, file="final2019.html")
setwd("~/Documents/Evans/VAforPM/VAforPM_Dashboard")
library(flexdashboard)
xfun::file_string("final2019.html")
saveWidget(final2020, file="final2020.html")
library(leafsync)
sync(xfun::file_string("final2019.html"),xfun::file_string("final2020.html"))
?sync
str(final2019)
saveRDS(final2019,"final2019.rds")
saveRDS(final2020,"final2020.rds")
readRDS("final2019.rds")
library(leafsync)
sync(readRDS("final2019.rds"),readRDS("final2019.rds"))
library(leafsync)
sync(readRDS("final2019.rds"),readRDS("final2020.rds"))
library(leaflet)
rm(list = ls())
library(sf)
MapCount=read_sf("NeighborhoodMap_crimecount.geojson")
# color segun valor
MapCount2019=MapCount[MapCount$year==2019,]
paletteFun=colorQuantile("YlGnBu",
MapCount2019$count,
n = 5)
# the base map
base= leaflet() %>% addTiles()
final2019 = base %>%
addPolygons(data=MapCount2019,
weight = 0, #width border
opacity =  1, # 0 transparencia total
fillOpacity = 0.8, # contraste de paleta
fillColor = ~paletteFun(count)) # coloreando
# color segun valor
MapCount2020=MapCount[MapCount$year==2020,]
paletteFun=colorQuantile("YlGnBu",
MapCount2020$count,
n = 5)
# the base map
base= leaflet() %>% addTiles()
final2020 = base %>%
addPolygons(data=MapCount2020,
weight = 0, #width border
opacity =  1, # 0 transparencia total
fillOpacity = 0.8, # contraste de paleta
fillColor = ~paletteFun(count)) # coloreando
# color segun valor
MapCount2021=MapCount[MapCount$year==2021,]
paletteFun=colorQuantile("YlGnBu",
MapCount2021$count,
n = 5)
# the base map
base= leaflet() %>% addTiles()
final2021 = base %>%
addPolygons(data=MapCount2021,
weight = 0, #width border
opacity =  1, # 0 transparencia total
fillOpacity = 0.8, # contraste de paleta
fillColor = ~paletteFun(count)) # coloreando
# color segun valor
MapCount2022=MapCount[MapCount$year==2022,]
paletteFun=colorQuantile("YlGnBu",
MapCount2022$count,
n = 5)
# the base map
base= leaflet() %>% addTiles()
final2022 = base %>%
addPolygons(data=MapCount2022,
weight = 0, #width border
opacity =  1, # 0 transparencia total
fillOpacity = 0.8, # contraste de paleta
fillColor = ~paletteFun(count)) # coloreando
library(leafsync)
sync(final2019, final2020, final2021, final2022)
saveRDS(final2019,"final2019.rds")
saveRDS(final2020,"final2020.rds")
saveRDS(final2021,"final2021.rds")
saveRDS(final2022,"final2022.rds")
rm(list = ls())
library(sf)
PointLocations=read_sf("crimes_dot_map.geojson")
PointLocations2019=PointLocations[PointLocations$year==2019,]
final2019p=leaflet(PointLocations2019) %>% addTiles() %>% addMarkers(
clusterOptions = markerClusterOptions()
)
PointLocations2020=PointLocations[PointLocations$year==2020,]
final2020p=leaflet(PointLocations2020) %>% addTiles() %>% addMarkers(
clusterOptions = markerClusterOptions()
)
PointLocations2021=PointLocations[PointLocations$year==2021,]
final2021p=leaflet(PointLocations2021) %>% addTiles() %>% addMarkers(
clusterOptions = markerClusterOptions()
)
PointLocations2022=PointLocations[PointLocations$year==2022,]
final2022p=leaflet(PointLocations2022) %>% addTiles() %>% addMarkers(
clusterOptions = markerClusterOptions()
)
library(leafsync)
latticeView(final2019p, final2020p, final2021p, final2022p)
saveRDS(final2019p,"final2019p.rds")
saveRDS(final2020p,"final2020p.rds")
saveRDS(final2021p,"final2021p.rds")
saveRDS(final2022p,"final2022p.rds")
library(leafsync)
sync(readRDS("final2019.rds"),
readRDS("final2020.rds"),
readRDS("final2021.rds"),
readRDS("final2022.rds"))
library(leafsync)
sync(readRDS("final2019p.rds"),
readRDS("final2020p.rds"),
readRDS("final2021p.rds"),
readRDS("final2022p.rds"))
load("BoxReducedLunch.rdata")
ggplotly(BoxReducedLunch)
